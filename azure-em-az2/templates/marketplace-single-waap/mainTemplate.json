{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "metadata": {
                "description": "Deployment location"
            },
            "defaultValue": "[resourceGroup().location]"
        },
        "cloudGuardVersion": {
            "type": "string",
            "allowedValues": [
                "R80.40 - Bring Your Own License"
            ],
            "defaultValue": "R80.40 - Bring Your Own License",
            "metadata": {
                "description": "Version of Check Point CloudGuard"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password"
            },
            "defaultValue": ""
        },
        "authenticationType": {
            "type": "string",
            "allowedValues": [
                "password",
                "sshPublicKey"
            ],
            "defaultValue": "password",
            "metadata": {
                "description": "Authentication type"
            }
        },
        "sshPublicKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Administrator SSH public key"
            }
        },
        "vmName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Check Point Security Gateway"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D3_v2",
            "metadata": {
                "description": "Size of the VM"
            }
        },
        "sicKey": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "One time key for Secure Internal Communication"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "The name of the virtual network"
            },
            "defaultValue": "vnet"
        },
        "virtualNetworkAddressPrefix": {
            "type": "string",
            "metadata": {
                "description": "The address prefix of the virtual network"
            },
            "defaultValue": "10.0.0.0/16"
        },
        "Subnet1Name": {
            "type": "string",
            "metadata": {
                "description": "The name of the 1st subnet"
            },
            "defaultValue": "Frontend"
        },
        "Subnet1Prefix": {
            "type": "string",
            "metadata": {
                "description": "The address prefix of the 1st subnet"
            },
            "defaultValue": "10.0.1.0/24"
        },
        "Subnet1StartAddress": {
            "type": "string",
            "metadata": {
                "description": "The first available address on the 1st subnet"
            },
            "defaultValue": "10.0.1.10"
        },
        "Subnet2Name": {
            "type": "string",
            "metadata": {
                "description": "The name of the 2nd subnet"
            },
            "defaultValue": "Backend"
        },
        "Subnet2Prefix": {
            "type": "string",
            "metadata": {
                "description": "The address prefix of the 2nd subnet"
            },
            "defaultValue": "10.0.2.0/24"
        },
        "Subnet2StartAddress": {
            "type": "string",
            "metadata": {
                "description": "The first available address on the 2nd subnet"
            },
            "defaultValue": "10.0.2.10"
        },
        "vnetNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "Description": "Indicates whether the virtual network is new or existing"
            }
        },
        "virtualNetworkExistingRGName": {
            "type": "string",
            "metadata": {
                "description": "Resource Group of the existing virtual network"
            },
            "defaultValue": "[resourceGroup().name]"
        },
        "waapPublicIP": {
            "type": "string",
            "allowedValues": [
                "no",
                "yes"
            ],
            "defaultValue": "yes",
            "metadata": {
                "description": "Auto Assign Public IP address"
            }
        },
        "inboundSources": {
            "type": "string",
            "defaultValue": "0.0.0.0/0",
            "metadata": {
                "description": "Configure inbound sources"
            }
        },
        "installationType": {
            "type": "string",
            "metadata": {
                "description": "Installation Type"
            },
            "defaultValue": "waap",
            "allowedValues": [
                "waap"
            ]
        },
        "bootstrapScript": {
            "type": "string",
            "metadata": {
                "description": "Bootstrap script"
            },
            "defaultValue": ""
        },
        "allowDownloadFromUploadToCheckPoint": {
            "type": "string",
            "allowedValues": [
                "true",
                "false"
            ],
            "defaultValue": "false",
            "metadata": {
                "description": "Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point"
            }
        },
        "diskType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "metadata": {
                "description": "The type of the OS disk. Premium is applicable only to DS machine sizes"
            },
            "allowedValues": [
                "Standard_LRS",
                "Premium_LRS"
            ]
        },
        "sourceImageVhdUri": {
            "type": "string",
            "defaultValue": "noCustomUri",
            "metadata": {
                "description": "The URI of the blob containing the development image"
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located including a trailing '/'"
            },
            "defaultValue": "[deployment().properties.templateLink.uri]"
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            },
            "defaultValue": ""
        },
        "waapAgentToken": {
            "type": "secureString",
            "defaultValue": "",
            "metadata": {
                "description": "Infinity Next Agent Token"
            }
        },
        "Check_PointTags": {
            "type": "object",
            "defaultValue": {
                "provider": "30DE18BC-F9F6-4F22-9D30-54B8E74CFD5F"
            }
        }
    },
    "variables": {
        "templateName": "checkpoint_waap",
        "templateVersion": "20210210",
        "location": "[parameters('location')]",
        "osVersions": {
            "R80.40 - Bring Your Own License": "R8040"
        },
        "osVersion": "[variables('osVersions')[parameters('cloudGuardVersion')]]",
        "installationType": "[parameters('installationType')]",
        "adminUsername": "notused",
        "isBlink": "true",
        "storageAccountName": "[concat('bootdiag', uniqueString(resourceGroup().id, deployment().name))]",
        "storageAccountType": "Standard_LRS",
        "diskSize100GB": 100,
        "diskSizeGB": "[variables('diskSize100GB')]",
        "customData": "[concat('#!/usr/bin/python3 /etc/cloud_config.py\n', '\n', 'installationType=\"', variables('installationType'), '\"', '\n', 'allowUploadDownload=\"', variables('allowUploadDownload'), '\"', '\n', 'osVersion=\"', variables('osVersion'), '\"', '\n', 'templateName=\"', variables('templateName'), '\"', '\n', 'isBlink=\"', variables('isBlink'), '\"', '\n', 'templateVersion=\"', variables('templateVersion'), '\"', '\n', 'bootstrapScript64=\"', variables('bootstrapScript64'), '\"', '\n', 'location=\"', variables('location'), '\"', '\n', 'sicKey=\"', variables('sicKey'), '\"', '\n','waapAgentToken =\"', variables('waapAgentToken'), '\"', '\n')]",
        "imageOffer": "infinity-gw",
        "imagePublisher": "checkpoint",
        "imageSku": "infinity-img",
        "imageReferenceBYOL": {
            "offer": "[variables('imageOffer')]",
            "publisher": "[variables('imagePublisher')]",
            "sku": "[variables('imageSku')]",
            "version": "latest"
        },
        "imageReferenceMarketplace": "[variables('imageReferenceBYOL')]",
        "customImage": "customImage",
        "imageReferenceCustomUri": {
            "id": "[resourceId('Microsoft.Compute/images/', variables('customImage'))]"
        },
        "imageReference": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('imageReferenceMarketplace'), variables('imageReferenceCustomUri'))]",
        "nic1Name": "[concat(parameters('vmName'), '-eth0')]",
        "nic2Name": "[concat(parameters('vmName'), '-eth1')]",
        "linuxConfigurationpassword": {
            "disablePasswordAuthentication": "false"
        },
        "linuxConfigurationsshPublicKey": {
            "disablePasswordAuthentication": "true",
            "ssh": {
                "publicKeys": [
                    {
                        "keyData": "[parameters('sshPublicKey')]",
                        "path": "/home/notused/.ssh/authorized_keys"
                    }
                ]
            }
        },
        "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'),  variables('linuxConfigurationpassword'), variables('linuxConfigurationsshPublicKey'))]",
        "planBYOL": {
            "name": "[variables('imageSku')]",
            "product": "[variables('imageOffer')]",
            "publisher": "[variables('imagePublisher')]"
        },
        "plan": "[variables('planBYOL')]",
        "publicIPAddressName": "[parameters('vmName')]",
        "publicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
        "publicIPAddress": {
            "id": "[variables('publicIPAddressId')]"
        },
        "bootstrapScript64": "[base64(parameters('bootstrapScript'))]",
        "allowUploadDownload": "[parameters('allowDownloadFromUploadToCheckPoint')]",
        "networkSetupURL": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vnet-', parameters('vnetNewOrExisting'), '.json', parameters('_artifactsLocationSasToken')))]",
        "nsgName": "[concat(parameters('vmName'), '-nsg')]",
        "nsgId": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
        "sicKey": "[parameters('sicKey')]",
        "waapAgentToken": "[parameters('waapAgentToken')]",
        "inboundSources": "[parameters('inboundSources')]"
    },
    "resources": [
        {
            "apiVersion": "2020-06-01",
            "name": "pid-769ae546-3d1f-5beb-87f2-918ac09137c0",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2019-06-01",
            "location": "[variables('location')]",
            "sku": {
                "name": "[variables('storageAccountType')]"
            },
            "kind": "Storage",
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]"
            }
        },
        {
            "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
            "name": "networkNewSetup",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('networkSetupURL')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "virtualNetworkName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "virtualNetworkAddressPrefix": {
                        "value": "[parameters('virtualNetworkAddressPrefix')]"
                    },
                    "Subnet1Name": {
                        "value": "[parameters('Subnet1Name')]"
                    },
                    "Subnet1Prefix": {
                        "value": "[parameters('Subnet1Prefix')]"
                    },
                    "Subnet1StartAddress": {
                        "value": "[parameters('Subnet1StartAddress')]"
                    },
                    "Subnet2Name": {
                        "value": "[parameters('Subnet2Name')]"
                    },
                    "Subnet2Prefix": {
                        "value": "[parameters('Subnet2Prefix')]"
                    },
                    "Subnet2StartAddress": {
                        "value": "[parameters('Subnet2StartAddress')]"
                    }
                }
            }
        },
        {
            "condition": "[equals(parameters('vnetNewOrExisting'), 'existing')]",
            "name": "networkExistingSetup",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('networkSetupURL')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "virtualNetworkName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "virtualNetworkExistingRGName": {
                        "value": "[parameters('virtualNetworkExistingRGName')]"
                    }
                }
            }
        },
        {
            "condition": "[equals(parameters('waapPublicIP'), 'yes')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-06-01",
            "location": "[variables('location')]",
            "name": "[variables('publicIPAddressName')]",
            "properties": {
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[concat(toLower(parameters('vmName')), '-', uniquestring(resourceGroup().id, deployment().name))]"
                }
            },
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-06-01",
            "location": "[variables('location')]",
            "name": "[variables('nsgName')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "Allow inbound SSH connection",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "[variables('inboundSources')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "GAiA-portal",
                        "properties": {
                            "description": "Allow inbound HTTPS access to the GAiA portal",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "30443",
                            "sourceAddressPrefix": "[variables('inboundSources')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "HTTPS",
                        "properties": {
                            "description": "Allow inbound access using the SmartConsole GUI client",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "[variables('inboundSources')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "HTTP",
                        "properties": {
                            "description": "Allow inbound access using the SmartConsole GUI client",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "[variables('inboundSources')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-06-01",
            "dependsOn": [
                "[coalesce(resourceId('Microsoft.Resources/deployments', 'networkNewSetup'), resourceId('Microsoft.Resources/deployments', 'networkExistingSetup'))]",
                "[variables('publicIPAddressId')]"
            ],
            "location": "[variables('location')]",
            "name": "[variables('nic1Name')]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[not(equals(variables('osVersion'), 'R8010'))]",
                "networkSecurityGroup": {
                    "id": "[variables('nsgId')]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAddress": "[parameters('Subnet1StartAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "publicIPAddress": "[if(equals(parameters('waapPublicIP'),'yes'), variables('publicIPAddress'), json('null'))]",
                            "subnet": {
                                "id": "[resourceId(parameters('virtualNetworkExistingRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('Subnet1Name'))]"
                            }
                        }
                    }
                ]
            },
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-06-01",
            "dependsOn": [
                "[coalesce(resourceId('Microsoft.Resources/deployments', 'networkNewSetup'), resourceId('Microsoft.Resources/deployments', 'networkExistingSetup'))]"
            ],
            "location": "[variables('location')]",
            "name": "[variables('nic2Name')]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[not(equals(variables('osVersion'), 'R8010'))]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig2",
                        "properties": {
                            "privateIPAddress": "[parameters('Subnet2StartAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[resourceId(parameters('virtualNetworkExistingRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('Subnet2Name'))]"
                            }
                        }
                    }
                ]
            },
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]"
            }
        },
        {
            "condition": "[not(equals(parameters('sourceImageVhdUri'), 'noCustomUri'))]",
            "type": "Microsoft.Compute/images",
            "apiVersion": "2020-06-01",
            "name": "[variables('customImage')]",
            "location": "[variables('location')]",
            "properties": {
                "storageProfile": {
                    "osDisk": {
                        "osType": "Linux",
                        "osState": "Generalized",
                        "blobUri": "[parameters('sourceImageVhdUri')]",
                        "storageAccountType": "Standard_LRS"
                    }
                },
                "hyperVGeneration": "V1"
            },
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2020-06-01",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nic1Name'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nic2Name'))]",
                "[resourceId('Microsoft.Compute/images/', variables('customImage'))]"
            ],
            "location": "[variables('location')]",
            "name": "[parameters('vmName')]",
            "plan": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('plan'), json('null'))]",
            "properties": {
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2018-07-01').primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic1Name'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic2Name'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                },
                "osProfile": {
                    "adminPassword": "[parameters('adminPassword')]",
                    "adminUsername": "[variables('adminUsername')]",
                    "computerName": "[toLower(parameters('vmName'))]",
                    "customData": "[base64(variables('customData'))]",
                    "linuxConfiguration": "[variables('linuxConfiguration')]"
                },
                "storageProfile": {
                    "imageReference": "[variables('imageReference')]",
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage",
                        "diskSizeGB": "[variables('diskSizeGB')]",
                        "name": "[parameters('vmName')]",
                        "managedDisk": {
                            "storageAccountType": "[parameters('diskType')]"
                        }
                    }
                }
            },
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]"
            }
        }
    ],
    "outputs": {}
}